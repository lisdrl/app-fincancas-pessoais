[{"/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/index.js":"1","/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/App.js":"2","/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/components/Registro/Registro.js":"3","/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/components/Modal/Modal.js":"4","/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/utils/listarRegistros.js":"5","/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/utils/handleOrdem.js":"6","/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/components/Chip/Chip.js":"7","/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/components/FilterInput/FilterInput.js":"8"},{"size":173,"mtime":1633906307207,"results":"9","hashOfConfig":"10"},{"size":17510,"mtime":1634055009196,"results":"11","hashOfConfig":"10"},{"size":1841,"mtime":1634070605353,"results":"12","hashOfConfig":"10"},{"size":3373,"mtime":1634050591753,"results":"13","hashOfConfig":"10"},{"size":181,"mtime":1633906347325,"results":"14","hashOfConfig":"10"},{"size":235,"mtime":1633908765046,"results":"15","hashOfConfig":"10"},{"size":2255,"mtime":1634053649630,"results":"16","hashOfConfig":"10"},{"size":461,"mtime":1634050637292,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1uloixg",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/index.js",[],["39","40"],"/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/App.js",["41","42","43","44","45","46","47","48","49","50","51","52","53"],"import './App.css';\n\nimport { Registro } from './components/Registro/Registro';\nimport { Modal } from './components/Modal/Modal';\nimport { Chip } from './components/Chip/Chip';\nimport { FilterInput } from './components/FilterInput/FilterInput';\n\nimport { listarRegistros } from './utils/listarRegistros';\nimport { handleOrdem } from './utils/handleOrdem';\n\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n\n  // ------------------------------- ESTADOS --------------------------------\n\n  // Tabela de Registros\n  const [formulario, setFormulario] = useState({ valor: 0, categoria: '', data: '', descricao: '' });\n  const [registros, setRegistros] = useState([]);\n  const [deletar, setDeletar] = useState(false);\n  const [ordemData, setOrdemData] = useState(\"crescente\");\n  const [ordemDia, setOrdemDia] = useState(false);\n  const [ordemValor, setOrdemValor] = useState(false);\n  // Filtros\n  const [filtroVisivel, setFiltroVisivel] = useState(false);\n  const [categorias, setCategorias] = useState([]);\n  const [semana, setSemana] = useState([\"Domingo\", \"Segunda\", \"Terça\", \"Quarta\", \"Quinta\", \"Sexta\", \"Sábado\"]);\n  const [filtroDia, setFiltroDia] = useState([]);\n  const [filtroCategoria, setFiltroCategoria] = useState([]);\n  const [filtroMinMax, setFiltroMinMax] = useState({ min: \"\", max: \"\" });\n  // Modais\n  const [adicionandoRegistro, setAdicionandoRegistro] = useState(false);\n  const [editandoRegistro, setEditandoRegistro] = useState(false);\n  const [tipoSaida, setTipoSaida] = useState(true);\n  // Resumo\n  const [entrada, setEntrada] = useState(0)\n  const [saida, setSaida] = useState(0)\n  const [saldo, setSaldo] = useState(0)\n  // Outros\n\n  \n  // ------------------------------- FUNÇÕES --------------------------------\n\n  // ------ TABELA DE REGISTROS ------\n\n  useEffect(() => {\n    listarRegistros().then((response) => {\n      const arrayOrdenado = response.sort((a, b) => new Date(a.date) - new Date(b.date));\n      setRegistros(arrayOrdenado);\n    });\n  }, []);\n\n  async function excluirRegistro(id) {\n    const deletado = await fetch(`http://localhost:3333/transactions/${id}`, {\n      method: \"DELETE\",\n    });\n    listarRegistros().then((response) => {\n      setRegistros(response);\n    });\n  };\n\n  useEffect(() => {\n    if (ordemValor === \"crescente\") {\n      setRegistros(prevState => {\n        const array = [...prevState];\n        const arrayOrdenado = array.sort((a, b) => Number(a.value) - Number(b.value));\n        return arrayOrdenado;\n      })\n    } else if (ordemValor === \"decrescente\") {\n      setRegistros(prevState => {\n        const array = [...prevState];\n        const arrayOrdenado = array.sort((a, b) => Number(b.value) - Number(a.value));\n        return arrayOrdenado;\n      })\n    }\n  }, [ordemValor]);\n\n  useEffect(() => {\n    if (ordemData === \"crescente\") {\n      setRegistros(prevState => {\n        const array = [...prevState];\n        const arrayOrdenado = array.sort((a, b) => new Date(a.date) - new Date(b.date));\n        return arrayOrdenado;\n      })\n    } else if (ordemData === \"decrescente\") {\n      setRegistros(prevState => {\n        const array = [...prevState];\n        const arrayOrdenado = array.sort((a, b) => new Date(b.date) - new Date(a.date));\n        return arrayOrdenado;\n      })\n    }\n  }, [ordemData]);\n\n  useEffect(() => {\n    if (ordemDia === \"crescente\") {\n      setRegistros(prevState => {\n        const array = [...prevState];\n        const arrayOrdenado = array.sort((a, b) => (new Date(a.date)).getDay() - (new Date(b.date)).getDay());\n        return arrayOrdenado;\n      })\n    } else if (ordemDia === \"decrescente\") {\n      setRegistros(prevState => {\n        const array = [...prevState];\n        const arrayOrdenado = array.sort((a, b) => (new Date(b.date)).getDay() - (new Date(a.date)).getDay());\n        return arrayOrdenado;\n      })\n    }\n  }, [ordemDia]);\n\n\n  // ------ RESUMO - ENTRADAS, SAÍDAS E SALDO ------\n\n  useEffect(() => {\n    const arrayDeRegistros = [...registros];\n    let somaEntrada = 0, somaSaida = 0, valorSaldo = 0;\n\n    for (let i = 0; i < arrayDeRegistros.length; i++) {\n      if (arrayDeRegistros[i].type === \"credit\") {\n        somaEntrada = somaEntrada + Number(arrayDeRegistros[i].value)\n      } else if (arrayDeRegistros[i].type === \"debit\") {\n        somaSaida = somaSaida + Number(arrayDeRegistros[i].value);\n      };\n    };\n\n    valorSaldo = somaEntrada - somaSaida;\n\n    setEntrada(somaEntrada);\n    setSaida(somaSaida);\n    setSaldo(valorSaldo);\n  }, [[], registros])\n\n\n  // ------ MODAIS - ADICIONAR E EDITAR REGISTRO ------\n\n  function handleChange(event) {\n    setFormulario({ ...formulario, [event.target.name]: event.target.value });\n  };\n\n  function handleCloseModal() {\n    setTipoSaida(true);\n    setAdicionandoRegistro(false);\n    setEditandoRegistro(false);\n    setFormulario({ valor: 0, categoria: '', data: '', descricao: '' });\n  };\n\n  function handleSubmitAdicionar(event) {\n    event.preventDefault();\n\n    const { valor, categoria, data, descricao } = formulario;\n\n    const ano = Number(data.slice(6));\n    const mes = Number(data.slice(3, 5)) - 1;\n    const dia = Number(data.slice(0, 2));\n\n    const index = new Date(ano, mes, dia).getDay();\n    const diaDaSemana = semana[index];\n\n    const form = {\n      \"date\": new Date(ano, mes, dia),\n      \"week_day\": diaDaSemana,\n      \"description\": descricao,\n      \"value\": valor * 100,\n      \"category\": categoria,\n      \"type\": tipoSaida ? \"debit\" : \"credit\"\n    };\n\n    fetch(\"http://localhost:3333/transactions\", {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: \"POST\",\n      body: JSON.stringify(form)\n    }).then(response => {\n      const responseJSON = response.json().then(novoRegistro => {\n        setRegistros(prevState => {\n          const arrayDeRegistros = [...prevState, novoRegistro];\n          const arrayOrdenado = arrayDeRegistros.sort((a, b) => new Date(a.date) - new Date(b.date));\n          return arrayOrdenado;\n        })\n      })\n    })\n\n    setAdicionandoRegistro(false);\n    setTipoSaida(true);\n  };\n\n  async function editarRegistro(registro) {\n    if (registro.type === \"credit\") {\n      setTipoSaida(false);\n    } else if (registro.type === \"debit\") {\n      setTipoSaida(true);\n    };\n\n    setEditandoRegistro(registro);\n\n    setFormulario({\n      valor: registro.value / 100,\n      categoria: registro.category,\n      diaDaSemana: registro.week_day,\n      data: new Date(registro.date).toLocaleDateString('pt-BR', { timeZone: 'UTC' }),\n      descricao: registro.description,\n      id: registro.id\n    });\n  };\n\n  function handleSubmitEditar(event) {\n    event.preventDefault();\n    const { valor, categoria, data, descricao, id } = formulario;\n    const ano = Number(data.slice(6));\n    const mes = Number(data.slice(3, 5)) - 1;\n    const dia = Number(data.slice(0, 2));\n    const index = new Date(ano, mes, dia).getDay();\n    const diaDaSemana = semana[index];\n    // 01/34/6789\n    const body = {\n      \"date\": new Date(ano, mes, dia),\n      \"week_day\": diaDaSemana,\n      \"description\": descricao,\n      \"value\": valor * 100,\n      \"category\": categoria,\n      \"type\": tipoSaida ? \"debit\" : \"credit\"\n    };\n\n    fetch(`http://localhost:3333/transactions/${formulario.id}`, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: \"PUT\",\n      body: JSON.stringify(body)\n    }).then(response => {\n      const responseJSON = response.json().then(novoRegistro => {\n        const array = [...registros];\n        let index = array.findIndex(registro => registro.id === id);\n        array.splice(index, 1, novoRegistro);\n        const arrayOrdenado = array.sort((a, b) => new Date(a.date) - new Date(b.date));\n        setRegistros(arrayOrdenado);\n      })\n    })\n    setEditandoRegistro(false);\n    setTipoSaida(true);\n    setFormulario({ valor: 0, categoria: '', data: '', descricao: '' });\n  };\n\n  // ------ FILTROS ------\n\n  useEffect(() => {\n    const arrayDeCategorias = [];\n    const arrayDeRegistros = [...registros];\n\n    arrayDeRegistros.forEach(registro => {\n      const categoriaEncontrada = arrayDeCategorias.some(categoria => categoria === registro.category);\n      if (!categoriaEncontrada) {\n        arrayDeCategorias.push(registro.category);\n      };\n    })\n\n    arrayDeCategorias.forEach(categoria => {\n      const categoriaEncontrada = arrayDeRegistros.some(registro => registro.category === categoria);\n      if (!categoriaEncontrada) {\n        const index = arrayDeCategorias.findIndex(item => item === categoria);\n        arrayDeCategorias.splice(index, 1)\n      };\n    })\n\n    setCategorias(arrayDeCategorias);\n    setSemana([\"Domingo\", \"Segunda\", \"Terça\", \"Quarta\", \"Quinta\", \"Sexta\", \"Sábado\"]);\n  }, [registros]);\n\n  async function handleClickFiltro() {\n    if (!filtroVisivel) {\n      setFiltroVisivel(true);\n    } else {\n      setFiltroVisivel(false);\n      listarRegistros().then((response) => {\n        setRegistros(response);\n      })\n    }\n  }\n\n  function handleChangeFiltro(event) {\n    setFiltroMinMax({ ...filtroMinMax, [event.target.name]: event.target.value });\n  };\n\n  async function handleFiltroSubmit(event) {\n    event.preventDefault();\n\n    setRegistros(prevState => {\n      const array = [...prevState];\n      const arrayFiltrado = array\n        .filter(registro => !filtroMinMax.max || Number(registro.value) >= (Number(filtroMinMax.min) * 100) && Number(registro.value) <= (Number(filtroMinMax.max) * 100))\n        .filter(registro => !filtroDia.length || filtroDia.includes(registro.week_day))\n        .filter(registro => !filtroCategoria.length || filtroCategoria.includes(registro.category))\n      return arrayFiltrado;\n    });\n\n    setFiltroDia([]);\n    setFiltroCategoria([]);\n    setFiltroMinMax({ min: \"\", max: \"\" });\n    setCategorias([]);\n    setSemana([]);\n  };\n\n  async function limparFiltros() {\n    setFiltroDia([]);\n    setFiltroCategoria([]);\n    setFiltroMinMax({ min: \"\", max: \"\" });\n    setCategorias([]);\n    setSemana([]);\n\n    listarRegistros().then((response) => {\n      setRegistros(response);\n    });\n  };\n\n\n\n  // ------------------------------- COMPONENTE APP --------------------------------\n  return (\n    <div className=\"App\">\n      <header className=\"container-header\">\n        <img src=\"./assets/Logo.svg\" />\n      </header>\n      <main>\n        <div className=\"left-side flex-column\">\n          <button onClick={handleClickFiltro} className=\"open-filters-button\">\n            <span className=\"filtrar-Btn__span\">\n              <img src=\"./assets/filtro.svg\" />\n              Filtrar\n            </span>\n          </button>\n{/*             Filtro          */}\n          {\n            filtroVisivel && (\n              <div className=\"container-filters\">\n                <div className=\"filters__type flex-column\">\n                  <h1>Dia da semana</h1>\n                  <div className=\"container-chips\">\n                    {\n                      semana.map(diaDaSemana => {\n                        return (\n                          <Chip setFiltro={setFiltroDia} filtro={filtroDia} item={diaDaSemana} />\n                        )\n                      })\n                    }\n                  </div>\n                </div>\n                <hr class=\"verticalLine\" size=\"300\" />\n                <div className=\"filters__type flex column\">\n                  <h1>Categoria</h1>\n                  <div className=\"container-chips\">\n                    {\n                      categorias.map(item => {\n                        return (\n                          <Chip setFiltro={setFiltroCategoria} filtro={filtroCategoria} item={item} />\n                        )\n                      })\n                    }\n                  </div>\n                </div>\n                <hr class=\"verticalLine\" size=\"300\" />\n                <div className=\"filters__value flex column\">\n                  <h1>Valor</h1>\n                  <form onSubmit={handleFiltroSubmit}>\n                    <FilterInput\n                      text=\"Min\"\n                      name=\"min\"\n                      id=\"min-value\"\n                      value={filtroMinMax.min}\n                      handleChange={handleChangeFiltro}\n                    />\n                    <FilterInput\n                      text=\"Max\"\n                      name=\"max\"\n                      id=\"max-value\"\n                      value={filtroMinMax.max}\n                      handleChange={handleChangeFiltro}\n                    />\n                  </form>\n                </div>\n                <div className=\"filters__btn\">\n                  <div className=\"btn-container\">\n                    <button className=\"btn-clear-filters\" onClick={limparFiltros}>Limpar Filtros</button>\n                    <button className=\"btn-apply-filters\" type=\"submit\" onClick={handleFiltroSubmit} >Aplicar Filtros</button>\n                  </div>\n                </div>\n              </div>\n            )\n          }\n{/*             Tabela de Registros          */}\n          <table className=\"table flex-column\">\n            <tr className=\"table-head\">\n              <th\n                className=\"column-title\"\n                id=\"date\"\n                onClick={() => handleOrdem(ordemData, setOrdemData, setOrdemDia, setOrdemValor)}>\n                Data\n                {ordemData && (\n                  <img src={ordemData === \"crescente\" ? './assets/setaUp.svg' : './assets/setaDown.svg'} />\n                )}\n              </th>\n              <th\n                className=\"column-title\"\n                id=\"week-day\"\n                onClick={() => handleOrdem(ordemDia, setOrdemDia, setOrdemData, setOrdemValor)}>\n                Dia da semana\n                {ordemDia && (\n                  <img src={ordemDia === \"crescente\" ? './assets/setaUp.svg' : './assets/setaDown.svg'} />\n                )}\n              </th>\n              <th className=\"column-title\">Descrição</th>\n              <th className=\"column-title\">Categoria</th>\n              <th\n                className=\"column-title\"\n                id=\"value\"\n                onClick={() => handleOrdem(ordemValor, setOrdemValor, setOrdemData, setOrdemDia)}>\n                Valor\n                {ordemValor && (\n                  <img src={ordemValor === \"crescente\" ? './assets/setaUp.svg' : './assets/setaDown.svg'} />\n                )}\n              </th>\n              <td className=\"tabela__header_placeholder\"><img src=\"./assets/editar.svg\" /><img src=\"./assets/excluir.svg\" /></td>\n            </tr>\n            <div className=\"table-body\">\n              {\n                registros.map(registro => {\n                  return (\n                    <Registro\n                      date={registro.date}\n                      week_day={registro.week_day}\n                      description={registro.description}\n                      category={registro.category}\n                      value={registro.value}\n                      type={registro.type}\n                      id={registro.id}\n                      registro={registro}\n                      editarRegistro={editarRegistro}\n                      excluirRegistro={excluirRegistro}\n                      setDeletar={setDeletar}\n                      setRegistros={setRegistros}\n                      deletar={deletar}\n                    />\n                  )\n                })\n              }\n            </div>\n          </table>\n        </div>\n        <div className=\"right-side\">\n{/*             Resumo          */}\n          <div className=\"container-resume\">\n            <h1>Resumo</h1>\n            <div>\n              <span className=\"resumo__entrada-saida\">Entradas<b className=\"in\">{(entrada / 100).toLocaleString(\"pt-BR\", {\n                style: 'currency',\n                currency: 'BRL'\n              })}</b></span>\n\n            </div>\n            <div>\n              <span className=\"resumo__entrada-saida\">Saída<b className=\"out\">{(saida / 100).toLocaleString(\"pt-BR\", {\n                style: 'currency',\n                currency: 'BRL'\n              })}</b></span>\n\n            </div>\n            <hr className=\"right-side__hr\" />\n            <div>\n              <span className=\"saldo\">Saldo<b className=\"balance\">{(saldo / 100).toLocaleString(\"pt-BR\", {\n                style: 'currency',\n                currency: 'BRL'\n              })}</b></span>\n\n            </div>\n          </div>\n          <button className=\"btn-add\" onClick={() => {\n            setAdicionandoRegistro(true);\n            setFormulario({ valor: 0, categoria: '', data: '', descricao: '' })\n          }}>Adicionar Registro</button>\n        </div>\n{/*             Modais          */}\n        {\n          adicionandoRegistro && (\n            <Modal\n              h1=\"Adicionar Registro\"\n              handleSubmit={handleSubmitAdicionar}\n              handleCloseModal={handleCloseModal}\n              tipoSaida={tipoSaida}\n              setTipoSaida={setTipoSaida}\n              formulario={formulario}\n              handleChange={handleChange}\n            />\n          )\n        }\n        {\n          editandoRegistro && (\n            <Modal\n              h1=\"Editar Registro\"\n              handleSubmit={handleSubmitEditar}\n              handleCloseModal={handleCloseModal}\n              tipoSaida={tipoSaida}\n              setTipoSaida={setTipoSaida}\n              formulario={formulario}\n              handleChange={handleChange}\n            />\n          )\n        }\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/components/Registro/Registro.js",["54","55"],"import './style.css';\nimport { useState } from 'react';\n\nexport function Registro({ id, category, date, description, value, type, week_day, registro, excluirRegistro, editarRegistro, setDeletar, deletar }) {\n  const [idDeletado, setIdDeletado] = useState();\n\n  return (\n    <div>\n      <tr key={id} className=\"table-line\">\n        <td className=\"line-items\">\n          {new Date(date).toLocaleDateString('pt-BR', { timeZone: 'UTC' })}\n        </td>\n        <td className=\"line-items week-day-item\">{week_day}</td>\n        <td className=\"line-items\" id=\"description\">{description}</td>\n        <td className=\"line-items\">{category}</td>\n        <td className={`line-items value ${type === \"debit\" ? \"debit-color\" : \"credit-color\"}`}>\n          {`${(value / 100).toLocaleString(\"pt-BR\", {\n            style: 'currency',\n            currency: 'BRL'\n          })}`}\n        </td>\n        <td className=\"line-items\">\n          <img\n            className=\"edit-icon\"\n            onClick={() => { editarRegistro(registro) }}\n            src=\"./assets/editar.svg\" />\n          <img\n            className=\"delete-icon\"\n            onClick={() => setIdDeletado(id)}\n            src=\"./assets/excluir.svg\" />\n        </td>\n      </tr>\n      <hr width=\"100%\"></hr>\n      {id === idDeletado &&\n        (<div className={`container-confirm-delete`}>\n          <div className=\"container-confirm-delete__triangle\"></div>\n          <div className=\"container-confirm-delete__baloon\">\n            <h1>Apagar item?</h1>\n            <div className=\"btn-actions-confirm-delete\">\n              <button className=\"btn-actions-confirm\" onClick={() => { excluirRegistro(id) }}>Sim</button>\n              <button className=\"btn-actions-delete\" onClick={() => setIdDeletado()} >Não</button>\n            </div>\n          </div>\n        </div>)\n      }\n    </div>\n\n  )\n};","/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/components/Modal/Modal.js",["56"],"import InputMask from 'react-input-mask';\nimport './style.css';\n\nexport function Modal ({h1, handleCloseModal, handleSubmit, tipoSaida, setTipoSaida, formulario, handleChange}) {\n    return (\n        <div className=\"position-center\">\n              <div className=\"intermediate\">\n                <div className=\"modal-container\">\n                  <h1>\n                    {h1}\n                    <img\n                      className=\"close-icon\"\n                      onClick={handleCloseModal}\n                      src=\"./assets/close.svg\"\n                    />\n                  </h1>\n                  <div className=\"entrada-saida\">\n                    <span\n                      className={`${tipoSaida ? \"greyish\" : \"colored-entrada\"}`}\n                      id=\"credit-button\"\n                      onClick={() => setTipoSaida(false)}\n                    >\n                      Entrada\n                    </span>\n                    <span\n                      className={`${tipoSaida ? \"colored-saida\" : \"greyish\"}`}\n                      id=\"debit-button\"\n                      onClick={() => setTipoSaida(true)}\n                    >\n                      Saída\n                    </span>\n                  </div>\n                  <form onSubmit={handleSubmit}>\n                    <div className=\"input-container flex-column\">\n                      <label>Valor</label>\n                      <input\n                        className=\"modal-input\"\n                        name=\"valor\" \n                        value={formulario.valor} \n                        type=\"number\" \n                        step=\"0.01\" \n                        min=\"0.01\" \n                        onChange={handleChange} \n                        required\n                      ></input>\n                    </div>\n                    <div className=\"input-container flex-column\">\n                      <label>Categoria</label>\n                      <input\n                        className=\"modal-input\" \n                        name=\"categoria\" \n                        value={formulario.categoria} \n                        type=\"text\" \n                        onChange={handleChange} \n                        required\n                      ></input>\n                    </div>\n                    <div className=\"input-container flex-column\">\n                      <label>Data</label>\n                      <InputMask\n                        mask=\"99/99/9999\"\n                        className=\"modal-input\" \n                        name=\"data\" \n                        value={formulario.data} \n                        onChange={handleChange} \n                        required\n                      />\n                    </div>\n                    <div className=\"input-container flex-column\">\n                      <label>Descrição</label>\n                      <input\n                        className=\"modal-input\" \n                        name=\"descricao\" \n                        value={formulario.descricao} \n                        type=\"text\" \n                        onChange={handleChange} \n                        required\n                      ></input>\n                    </div>\n                    <button className=\"btn-insert\" type=\"submit\">Confirmar</button>\n                  </form>\n                </div>\n              </div>\n            </div>\n    )\n};","/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/utils/listarRegistros.js",[],"/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/utils/handleOrdem.js",[],"/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/components/Chip/Chip.js",["57","58"],"import './style.css';\nimport { useState, useEffect } from 'react';\n\nexport function Chip({ setFiltro, filtro, item }) {\n    const [chipAtivo, setChipAtivo] = useState(false);\n\n\n\n    return (\n        <button\n            className={`container-chip ${chipAtivo && \"chip-selected\"}`}\n            onClick={() => {\n                setFiltro(prevState => {\n                    const array = [...prevState];\n                    const index = array.findIndex(x => x === item);\n                    if (index !== -1){\n                        array.splice(index, 1);\n                        return array;\n                    } else {\n                        const arrayModificado = [...array, item];\n                        return arrayModificado;\n                    };\n                });\n                setChipAtivo(!chipAtivo ? true : false);\n            }\n            }\n            key={item}>\n            <span className=\"chip-span\">{item}</span>\n            <img className={chipAtivo ? 'x-icon' : 'plus-icon'} src={chipAtivo ? './assets/x-icon.svg' : './assets/plus-icon.svg'} />\n        </button>\n    )\n}\n\n\n// export function Chip({ setFiltro, item }) {\n//     const [chipAtivo, setChipAtivo] = useState(false);\n\n//     return (\n//         <button\n//             className={`container-chip ${chipAtivo && \"chip-selected\"}`}\n//             onClick={() => {\n//                 setFiltro(prevState => {\n//                     const array = [...prevState];\n//                     const index = array.findIndex(x => x === item);\n//                     if (index !== -1){\n//                         array.splice(index, 1);\n//                         // setChipAtivo(false);\n//                         return array;\n//                     } else {\n//                         const arrayModificado = [...array, item];\n//                         return arrayModificado;\n//                     };\n//                 });\n//                 setChipAtivo(chipAtivo ? false : true);\n//             }\n//             }\n//             key={item}>\n//             <span className=\"chip-span\">{item}</span>\n//             <img className={chipAtivo ? 'x-icon' : 'plus-icon'} src={chipAtivo ? './assets/x-icon.svg' : './assets/plus-icon.svg'} />\n//         </button>\n//     )\n// }","/home/lis/Desktop/0 CUBOS ACADEMY/FRONT-END/MÓDULO 3 - FRONT-END/Desafio-de-front/front-integral-desafio-m03/src/components/FilterInput/FilterInput.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":54,"column":11,"nodeType":"65","messageId":"66","endLine":54,"endColumn":19},{"ruleId":"67","severity":1,"message":"68","line":130,"column":7,"nodeType":"69","endLine":130,"endColumn":9},{"ruleId":"63","severity":1,"message":"70","line":175,"column":13,"nodeType":"65","messageId":"66","endLine":175,"endColumn":25},{"ruleId":"63","severity":1,"message":"70","line":232,"column":13,"nodeType":"65","messageId":"66","endLine":232,"endColumn":25},{"ruleId":"71","severity":1,"message":"72","line":291,"column":47,"nodeType":"73","messageId":"74","endLine":291,"endColumn":49},{"ruleId":"71","severity":1,"message":"72","line":291,"column":109,"nodeType":"73","messageId":"74","endLine":291,"endColumn":111},{"ruleId":"75","severity":1,"message":"76","line":322,"column":9,"nodeType":"77","endLine":322,"endColumn":40},{"ruleId":"75","severity":1,"message":"76","line":328,"column":15,"nodeType":"77","endLine":328,"endColumn":48},{"ruleId":"75","severity":1,"message":"76","line":399,"column":19,"nodeType":"77","endLine":399,"endColumn":108},{"ruleId":"75","severity":1,"message":"76","line":408,"column":19,"nodeType":"77","endLine":408,"endColumn":107},{"ruleId":"75","severity":1,"message":"76","line":419,"column":19,"nodeType":"77","endLine":419,"endColumn":109},{"ruleId":"75","severity":1,"message":"76","line":422,"column":58,"nodeType":"77","endLine":422,"endColumn":91},{"ruleId":"75","severity":1,"message":"76","line":422,"column":91,"nodeType":"77","endLine":422,"endColumn":125},{"ruleId":"75","severity":1,"message":"76","line":23,"column":11,"nodeType":"77","endLine":26,"endColumn":41},{"ruleId":"75","severity":1,"message":"76","line":27,"column":11,"nodeType":"77","endLine":30,"endColumn":42},{"ruleId":"75","severity":1,"message":"76","line":11,"column":21,"nodeType":"77","endLine":15,"endColumn":23},{"ruleId":"63","severity":1,"message":"78","line":2,"column":20,"nodeType":"65","messageId":"66","endLine":2,"endColumn":29},{"ruleId":"75","severity":1,"message":"76","line":29,"column":13,"nodeType":"77","endLine":29,"endColumn":134},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'deletado' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","ArrayExpression","'responseJSON' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]